name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  UV_VERSION: '0.5.11'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for TruffleHog

      - name: TruffleHog Security Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --only-verified

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: security-scan
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-13]  # ARM64 and Intel Macs
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          uv sync --locked --all-extras
          uv pip install -e .

      - name: Run type checking
        run: uv run mypy process_killer.py

      - name: Run linting
        run: |
          uv run ruff check .
          uv run black --check .

      - name: Run tests
        run: |
          # Create a simple test to verify the script can be imported
          uv run python -c "import process_killer; print(f'Version: {process_killer.__version__}')"
          # Verify CLI help works
          uv run python process_killer.py --help

      - name: Test Docker detection (if available)
        run: |
          if command -v docker &> /dev/null; then
            uv run python process_killer.py --help | grep -q "docker"
            echo "Docker support verified"
          else
            echo "Docker not available, skipping"
          fi

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Build package
        run: uv build

      - name: Store artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ github.ref_name }}" \
            --title "Process Killer ${{ github.ref_name }}" \
            --notes "See CHANGELOG.md for details" \
            --draft \
            dist/*

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - uses: actions/checkout@v4

      - name: Setup uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --locked

      - name: Check code formatting
        run: |
          uv run black --check .
          uv run ruff format --check .

      - name: Run linting with detailed output
        run: uv run ruff check . --output-format=github

      - name: Check for security vulnerabilities
        run: |
          uv pip install safety
          uv run safety check || true  # Don't fail on vulnerabilities, just report
